{"version":3,"sources":["css/App.module.css","WordsDisplay.js","App.js","index.js","css/WordsDisplay.module.css"],"names":["module","exports","App","Header","Main","label","inputContainer","input","msg","WordsDisplay","_ref","words","displayMsg","changeHeight","_useState","useState","_useState2","Object","slicedToArray","oldHeight","setOldHeight","dispRef","useRef","onClick","e","str","currentTarget","innerText","el","document","createElement","value","body","appendChild","select","execCommand","removeChild","concat","useEffect","current","newHeight","clientHeight","style","height","setTimeout","react_default","a","className","CSS","ref","wordList","map","_ref2","i","word","wordItem","key","setInput","_useState3","_useState4","setMsg","_useReducer","useReducer","prevState","action","type","error","errorMsg","_useReducer2","result","dispatch","AppRef","hideTimerRef","msgTimerRef","inpRef","msgRef","showWin","opacity","background","focus","hideWin","window","electron","remote","getCurrentWindow","hide","clearTimeout","isBlurred","isFocused","onSubmit","asyncToGenerator","regenerator_default","mark","_callee","resp","json","message","wrap","_context","prev","next","preventDefault","abrupt","fetch","sent","length","Error","t0","stop","_x","apply","this","arguments","newMsg","addEventListener","hasFocus","currWin","addListener","removeListener","removeEventListener","onChange","_ref3","target","placeholder","maxLength","autoComplete","autoCorrect","autoFocus","Boolean","src_WordsDisplay","addedHeight","maxHeight","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.ade6e7f3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3tzOe\",\"Header\":\"App_Header__148Dw\",\"Main\":\"App_Main__2SL_J\",\"label\":\"App_label__1m7pb\",\"inputContainer\":\"App_inputContainer__TDyCO\",\"input\":\"App_input__1VnH9\",\"msg\":\"App_msg__229PS\"};","import React, { useState, useEffect, useRef } from 'react';\nimport CSS from './css/WordsDisplay.module.css';\n\nfunction WordsDisplay({ words, displayMsg, changeHeight }) {\n  const [oldHeight, setOldHeight] = useState(0);\n  const dispRef = useRef();\n\n  const onClick = e => {\n    const str = e.currentTarget.innerText;\n    // Copy to clipboard.\n\n    const el = document.createElement('textarea');\n    el.value = str;\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n\n    displayMsg(`Copied \"${str}\" to clipboard`);\n  };\n\n  useEffect(() => {\n    // On first load and on word list change, update height for animation.\n    if (dispRef.current) {\n      const newHeight = dispRef.current.clientHeight;\n      if (newHeight < oldHeight) {\n        dispRef.current.style.height = `${oldHeight}px`;\n        changeHeight(newHeight);\n        setTimeout(() => {\n          dispRef.current.style.height = '';\n        }, 600);\n      } else {\n        setOldHeight(newHeight);\n        changeHeight(newHeight);\n      }\n    }\n  }, [words]);\n\n  return (\n    <section className={CSS.WordsDisplay} ref={dispRef}>\n      <ol className={CSS.wordList}>\n        {words.map(({ word }, i) => (\n          <li className={CSS.wordItem} key={`${i}_${word}`} onClick={onClick}>\n            {word}\n          </li>\n        ))}\n      </ol>\n    </section>\n  );\n}\n\nexport default WordsDisplay;\n","import React, { useState, useReducer, useEffect, useRef } from 'react';\nimport WordsDisplay from './WordsDisplay';\nimport CSS from './css/App.module.css';\n\n// If loses focus for longer than 5 seconds, fade out.\n// On fadeout or close, clear all internal data and window.close()\nfunction App() {\n  const [input, setInput] = useState('');\n  const [msg, setMsg] = useState('');\n  const [result, dispatch] = useReducer(\n    (prevState, action) => {\n      switch (action.type) {\n        case 'success':\n          return {\n            error: false,\n            errorMsg: '',\n            words: action.words,\n          };\n        case 'error':\n          return {\n            error: true,\n            errorMsg: action.errorMsg,\n            words: prevState.words,\n          };\n        default:\n          return prevState;\n      }\n    },\n    { error: false, errorMsg: '', words: [] },\n  );\n\n  const AppRef = useRef();\n  const hideTimerRef = useRef();\n  const msgTimerRef = useRef();\n  const inpRef = useRef();\n  const msgRef = useRef();\n\n  const showWin = () => {\n    document.body.style.opacity = 1;\n    AppRef.current.style.opacity = 1;\n    AppRef.current.style.background = 'rgba(236, 236, 219, 1)';\n\n    // Focus input box\n    inpRef.current.focus();\n    inpRef.current.select();\n  };\n\n  const hideWin = () => {\n    // Fade transparency, then hide window entirely.\n    document.body.style.opacity = 0;\n    AppRef.current.style.opacity = 0;\n    AppRef.current.style.background = 'rgba(236, 236, 219, 0)';\n    setTimeout(() => {\n      window.electron.remote.getCurrentWindow().hide();\n      if (hideTimerRef.current) window.clearTimeout(hideTimerRef.current);\n    }, 800);\n  };\n\n  const isBlurred = () => {\n    // Hide the window after 4s of being blurred.\n    hideTimerRef.current = window.setTimeout(hideWin, 4000);\n  };\n\n  const isFocused = () => {\n    // If focused, check if there's a timer going. If there is, cancel it.\n    if (hideTimerRef.current) window.clearTimeout(hideTimerRef.current);\n  };\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    if (!input) return false;\n\n    try {\n      const resp = await fetch(`https://api.datamuse.com/words?rel_syn=${input}`);\n      const json = await resp.json();\n      if (!json.length) throw new Error(`No synonyms found for \"${input}\"`);\n      dispatch({ type: 'success', words: json });\n    } catch ({ message }) {\n      dispatch({ type: 'error', errorMsg: message });\n    }\n\n    inpRef.current.focus();\n    inpRef.current.select();\n  };\n\n  const displayMsg = newMsg => {\n    setMsg(newMsg);\n    msgRef.current.style.opacity = 1;\n    if (msgTimerRef.current) {\n      // If there's already a timer going, reset it so the message stays for 5s.\n      window.clearTimeout(msgTimerRef.current);\n    }\n\n    msgTimerRef.current = window.setTimeout(() => {\n      msgRef.current.style.opacity = 0;\n      msgTimerRef.current = null;\n    }, 3000);\n  };\n\n  useEffect(() => {\n    // First, when app starts make everything visible.\n    document.body.style.opacity = 1;\n    AppRef.current.style.opacity = 1;\n    AppRef.current.style.background = 'rgba(4236, 236, 219, 1)';\n\n    // Set focus listeners.\n    window.addEventListener('blur', isBlurred);\n    window.addEventListener('mouseout', () => {\n      // Mouseout is special, only blur if is also not focused.\n      if (!document.hasFocus()) isBlurred();\n    });\n    window.addEventListener('focus', isFocused);\n    window.addEventListener('mouseover', isFocused);\n\n    // Fade in transparency.\n    const currWin = window.electron.remote.getCurrentWindow();\n    currWin.addListener('show', showWin);\n\n    // Focus input box.\n    return () => {\n      currWin.removeListener('show', showWin);\n      window.removeEventListener('blur', isBlurred);\n      window.removeEventListener('mouseout', isBlurred);\n      window.removeEventListener('focus', isFocused);\n      window.removeEventListener('mouseover', isFocused);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (result.error) displayMsg(result.errorMsg);\n  }, [result]);\n\n  const changeHeight = addedHeight => {\n    AppRef.current.style.maxHeight = `${188 + addedHeight}px`;\n  };\n\n  return (\n    <div className={CSS.App} ref={AppRef}>\n      <section className={CSS.Main}>\n        <p className={CSS.label}>Synonym Search</p>\n        <div className={CSS.inputContainer}>\n          <form onSubmit={onSubmit}>\n            <input\n              className={CSS.input}\n              value={input}\n              onChange={({ target }) => setInput(target.value)}\n              onSubmit={onSubmit}\n              ref={inpRef}\n              placeholder=\"Find a synonym...\"\n              maxLength={30}\n              autoComplete=\"off\"\n              autoCorrect=\"off\"\n              autoFocus\n            />\n          </form>\n        </div>\n      </section>\n      {Boolean(result.words.length) && (\n        <WordsDisplay words={result.words} displayMsg={displayMsg} changeHeight={changeHeight} />\n      )}\n      <p className={CSS.msg} ref={msgRef}>\n        {msg}\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport './css/index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wordList\":\"WordsDisplay_wordList__3Bd3h\",\"wordItem\":\"WordsDisplay_wordItem__2Lt54\"};"],"sourceRoot":""}